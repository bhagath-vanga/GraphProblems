TC -> O(N+E)
SC -> O(2N) // for vis[] and dfsvis[]
ASC -> O(N) // for dfs recurrence call


class Solution 
{
    //Function to detect cycle in a directed graph.
    public boolean isCyclic(int V, ArrayList<ArrayList<Integer>> adj)
    {
        // code here
        int vis[] = new int[V];
        int dfsVis[] = new int[V];
        
        for(int i=0;i<V;i++){
            if(vis[i]==0){
                if(cycleDFS(i,adj,vis,dfsVis)==true) return true;
            }
        }
        return false;
    }
    
    public boolean cycleDFS(int node,ArrayList<ArrayList<Integer>> adj, int vis[], int dfsVis[]){
        vis[node]=1;
        dfsVis[node]=1;
        
        for(Integer it: adj.get(node)){
            if(vis[it]==0){
                if(cycleDFS(it,adj,vis,dfsVis)==true) return true;
            }
            else if(dfsVis[it]==1) return true;
        }
    dfsVis[node]=0;
    return false;
    }
}