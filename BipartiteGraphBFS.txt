public class BipartiteGraphBFS {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
	        int n = 7;
	        ArrayList<ArrayList<Integer> > adj = new ArrayList<ArrayList<Integer> >();
			
			for (int i = 0; i < n; i++) 
				adj.add(new ArrayList<Integer>());
				
			adj.get(0).add(1);
			adj.get(1).add(0);

			adj.get(1).add(2);
			adj.get(2).add(1);

			adj.get(2).add(3);
			adj.get(3).add(2);

			adj.get(4).add(3);
			adj.get(3).add(4);

			adj.get(4).add(5);
			adj.get(5).add(4);

			adj.get(4).add(6);
			adj.get(6).add(4);

			adj.get(1).add(6);
			adj.get(6).add(1);
			
				
			Main obj = new Main(); 
			if(obj.checkBipartite(adj, n) == true) System.out.println("Yes Bipartite"); 
			else System.out.println("Not Bipartite"); 
			
	    }
	public boolean checkBipartite(ArrayList<ArrayList<Integer>>adj, int n) {
		int color[]= new int[n];
		for(int i=0;i<n;i++) {
			color[i]=-1;
		}
		for(int i=0;i<n;i++) {
			if(color[i]==-1) {
				if(BipartiteBFS(i,adj,color)!=true) return false;
			}
		}
		return true;
	}
	
	public boolean BipartiteBFS(int node,ArrayList<ArrayList<Integer>>adj,int color[]) {
		Queue<Integer> q= new LinkedList<>();
		q.add(node);
		color[node]=1;
		
		while(!q.isEmpty()) {
			Integer temp=q.poll();
			for(Integer it: adj.get(temp)) {
				if(color[it]==-1) {
					color[it]=1-color[temp];
					q.add(it);
				}
				else if(color[it]==color[temp]) { return false; 
				}
			}
		}
		return true;
	}
	
	

}
